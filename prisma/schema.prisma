generator client {
  provider      = "prisma-client-js"
  output        = "generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}

model User {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  email     String        @unique
  username  String        @unique
  password  String
  avatarUrl String?       @map("avatar_url")
  phone     String?       @unique
  bookmarks Bookmark[]
  trips     Trip[]
  settings  UserSettings?

  @@map("user")
}

model UserSettings {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  notifications Boolean  @default(true)
  language      String   @default("en")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tripId    String   @map("trip_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bookmark")
}

model Trip {
  id          String          @id @default(cuid())
  name        String
  description String?
  imageUrl    String?         @map("image_url")
  userId      String          @map("user_id")
  startDate   DateTime?       @map("start_date")
  endDate     DateTime?       @map("end_date")
  duration    Int?
  difficulty  Difficulty
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  blocks      Block[]
  bookmarks   Bookmark[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment   TripEquipment[]

  @@map("trip")
}

model Block {
  id        String   @id @default(cuid())
  type      String
  content   String
  tripId    String   @map("trip_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  points    Point[]

  @@map("block")
}

model Point {
  id          String   @id @default(cuid())
  latitude    Float
  longitude   Float
  name        String?
  description String?
  blockId     String   @map("block_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  block       Block    @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("point")
}

model TripEquipment {
  id        String        @id @default(cuid())
  tripId    String        @map("trip_id")
  type      EquipmentType
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  trip      Trip          @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("trip_equipment")
}

enum EquipmentType {
  TENT
  ROPE
  BACKPACK
  SLEEPING_BAG
  COOKING_KIT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
